// -*- C++ -*-
// This is a header file generated with the command:
// makeCMS3ClassFiles("/home/jguiang/projects/GATOR/ntuple/input.root", "tree", "LSTTree", "GNN", "lst")

#ifndef LSTTree_H
#define LSTTree_H

#include "Math/LorentzVector.h"
#include "Math/GenVector/PtEtaPhiM4D.h"
#include "Math/Point3D.h"
#include "TMath.h"
#include "TBranch.h"
#include "TTree.h"
#include "TH1F.h"
#include "TFile.h"
#include "TBits.h"
#include <vector> 
#include <unistd.h> 

using namespace std; 
class LSTTree {
 private: 
 protected: 
  unsigned int index;
  vector<float> *sim_pt_;
  TBranch *sim_pt_branch;
  bool     sim_pt_isLoaded;
  vector<float> *sim_eta_;
  TBranch *sim_eta_branch;
  bool     sim_eta_isLoaded;
  vector<float> *sim_phi_;
  TBranch *sim_phi_branch;
  bool     sim_phi_isLoaded;
  vector<float> *sim_pca_dxy_;
  TBranch *sim_pca_dxy_branch;
  bool     sim_pca_dxy_isLoaded;
  vector<float> *sim_pca_dz_;
  TBranch *sim_pca_dz_branch;
  bool     sim_pca_dz_isLoaded;
  vector<int> *sim_q_;
  TBranch *sim_q_branch;
  bool     sim_q_isLoaded;
  vector<int> *sim_event_;
  TBranch *sim_event_branch;
  bool     sim_event_isLoaded;
  vector<int> *sim_pdgId_;
  TBranch *sim_pdgId_branch;
  bool     sim_pdgId_isLoaded;
  vector<float> *sim_vx_;
  TBranch *sim_vx_branch;
  bool     sim_vx_isLoaded;
  vector<float> *sim_vy_;
  TBranch *sim_vy_branch;
  bool     sim_vy_isLoaded;
  vector<float> *sim_vz_;
  TBranch *sim_vz_branch;
  bool     sim_vz_isLoaded;
  vector<float> *sim_trkNtupIdx_;
  TBranch *sim_trkNtupIdx_branch;
  bool     sim_trkNtupIdx_isLoaded;
  vector<int> *sim_TC_matched_;
  TBranch *sim_TC_matched_branch;
  bool     sim_TC_matched_isLoaded;
  vector<vector<int> > *sim_TC_matched_idx_;
  TBranch *sim_TC_matched_idx_branch;
  bool     sim_TC_matched_idx_isLoaded;
  vector<int> *sim_TC_matched_mask_;
  TBranch *sim_TC_matched_mask_branch;
  bool     sim_TC_matched_mask_isLoaded;
  vector<float> *tc_pt_;
  TBranch *tc_pt_branch;
  bool     tc_pt_isLoaded;
  vector<float> *tc_eta_;
  TBranch *tc_eta_branch;
  bool     tc_eta_isLoaded;
  vector<float> *tc_phi_;
  TBranch *tc_phi_branch;
  bool     tc_phi_isLoaded;
  vector<int> *tc_type_;
  TBranch *tc_type_branch;
  bool     tc_type_isLoaded;
  vector<int> *tc_isFake_;
  TBranch *tc_isFake_branch;
  bool     tc_isFake_isLoaded;
  vector<int> *tc_isDuplicate_;
  TBranch *tc_isDuplicate_branch;
  bool     tc_isDuplicate_isLoaded;
  vector<vector<int> > *tc_matched_simIdx_;
  TBranch *tc_matched_simIdx_branch;
  bool     tc_matched_simIdx_isLoaded;
  vector<float> *sim_dummy_;
  TBranch *sim_dummy_branch;
  bool     sim_dummy_isLoaded;
  vector<float> *tc_dummy_;
  TBranch *tc_dummy_branch;
  bool     tc_dummy_isLoaded;
  vector<vector<int> > *pT5_matched_simIdx_;
  TBranch *pT5_matched_simIdx_branch;
  bool     pT5_matched_simIdx_isLoaded;
  vector<vector<int> > *pT5_hitIdxs_;
  TBranch *pT5_hitIdxs_branch;
  bool     pT5_hitIdxs_isLoaded;
  vector<int> *sim_pT5_matched_;
  TBranch *sim_pT5_matched_branch;
  bool     sim_pT5_matched_isLoaded;
  vector<float> *pT5_pt_;
  TBranch *pT5_pt_branch;
  bool     pT5_pt_isLoaded;
  vector<float> *pT5_eta_;
  TBranch *pT5_eta_branch;
  bool     pT5_eta_isLoaded;
  vector<float> *pT5_phi_;
  TBranch *pT5_phi_branch;
  bool     pT5_phi_isLoaded;
  vector<int> *pT5_isFake_;
  TBranch *pT5_isFake_branch;
  bool     pT5_isFake_isLoaded;
  vector<int> *pT5_isDuplicate_;
  TBranch *pT5_isDuplicate_branch;
  bool     pT5_isDuplicate_isLoaded;
  vector<int> *pT5_score_;
  TBranch *pT5_score_branch;
  bool     pT5_score_isLoaded;
  vector<int> *pT5_layer_binary_;
  TBranch *pT5_layer_binary_branch;
  bool     pT5_layer_binary_isLoaded;
  vector<int> *pT5_moduleType_binary_;
  TBranch *pT5_moduleType_binary_branch;
  bool     pT5_moduleType_binary_isLoaded;
  vector<float> *pT5_matched_pt_;
  TBranch *pT5_matched_pt_branch;
  bool     pT5_matched_pt_isLoaded;
  vector<float> *pT5_rzChiSquared_;
  TBranch *pT5_rzChiSquared_branch;
  bool     pT5_rzChiSquared_isLoaded;
  vector<float> *pT5_rPhiChiSquared_;
  TBranch *pT5_rPhiChiSquared_branch;
  bool     pT5_rPhiChiSquared_isLoaded;
  vector<float> *pT5_rPhiChiSquaredInwards_;
  TBranch *pT5_rPhiChiSquaredInwards_branch;
  bool     pT5_rPhiChiSquaredInwards_isLoaded;
  vector<int> *sim_pT3_matched_;
  TBranch *sim_pT3_matched_branch;
  bool     sim_pT3_matched_isLoaded;
  vector<float> *pT3_pt_;
  TBranch *pT3_pt_branch;
  bool     pT3_pt_isLoaded;
  vector<int> *pT3_isFake_;
  TBranch *pT3_isFake_branch;
  bool     pT3_isFake_isLoaded;
  vector<int> *pT3_isDuplicate_;
  TBranch *pT3_isDuplicate_branch;
  bool     pT3_isDuplicate_isLoaded;
  vector<float> *pT3_eta_;
  TBranch *pT3_eta_branch;
  bool     pT3_eta_isLoaded;
  vector<float> *pT3_phi_;
  TBranch *pT3_phi_branch;
  bool     pT3_phi_isLoaded;
  vector<float> *pT3_score_;
  TBranch *pT3_score_branch;
  bool     pT3_score_isLoaded;
  vector<int> *pT3_foundDuplicate_;
  TBranch *pT3_foundDuplicate_branch;
  bool     pT3_foundDuplicate_isLoaded;
  vector<vector<int> > *pT3_matched_simIdx_;
  TBranch *pT3_matched_simIdx_branch;
  bool     pT3_matched_simIdx_isLoaded;
  vector<vector<int> > *pT3_hitIdxs_;
  TBranch *pT3_hitIdxs_branch;
  bool     pT3_hitIdxs_isLoaded;
  vector<float> *pT3_pixelRadius_;
  TBranch *pT3_pixelRadius_branch;
  bool     pT3_pixelRadius_isLoaded;
  vector<float> *pT3_pixelRadiusError_;
  TBranch *pT3_pixelRadiusError_branch;
  bool     pT3_pixelRadiusError_isLoaded;
  vector<vector<float> > *pT3_matched_pt_;
  TBranch *pT3_matched_pt_branch;
  bool     pT3_matched_pt_isLoaded;
  vector<float> *pT3_tripletRadius_;
  TBranch *pT3_tripletRadius_branch;
  bool     pT3_tripletRadius_isLoaded;
  vector<float> *pT3_rPhiChiSquared_;
  TBranch *pT3_rPhiChiSquared_branch;
  bool     pT3_rPhiChiSquared_isLoaded;
  vector<float> *pT3_rPhiChiSquaredInwards_;
  TBranch *pT3_rPhiChiSquaredInwards_branch;
  bool     pT3_rPhiChiSquaredInwards_isLoaded;
  vector<float> *pT3_rzChiSquared_;
  TBranch *pT3_rzChiSquared_branch;
  bool     pT3_rzChiSquared_isLoaded;
  vector<int> *pT3_layer_binary_;
  TBranch *pT3_layer_binary_branch;
  bool     pT3_layer_binary_isLoaded;
  vector<int> *pT3_moduleType_binary_;
  TBranch *pT3_moduleType_binary_branch;
  bool     pT3_moduleType_binary_isLoaded;
  vector<int> *sim_T5_matched_;
  TBranch *sim_T5_matched_branch;
  bool     sim_T5_matched_isLoaded;
  vector<int> *t5_isFake_;
  TBranch *t5_isFake_branch;
  bool     t5_isFake_isLoaded;
  vector<int> *t5_isDuplicate_;
  TBranch *t5_isDuplicate_branch;
  bool     t5_isDuplicate_isLoaded;
  vector<int> *t5_foundDuplicate_;
  TBranch *t5_foundDuplicate_branch;
  bool     t5_foundDuplicate_isLoaded;
  vector<float> *t5_pt_;
  TBranch *t5_pt_branch;
  bool     t5_pt_isLoaded;
  vector<float> *t5_eta_;
  TBranch *t5_eta_branch;
  bool     t5_eta_isLoaded;
  vector<float> *t5_phi_;
  TBranch *t5_phi_branch;
  bool     t5_phi_isLoaded;
  vector<float> *t5_score_rphisum_;
  TBranch *t5_score_rphisum_branch;
  bool     t5_score_rphisum_isLoaded;
  vector<vector<int> > *t5_hitIdxs_;
  TBranch *t5_hitIdxs_branch;
  bool     t5_hitIdxs_isLoaded;
  vector<vector<int> > *t5_matched_simIdx_;
  TBranch *t5_matched_simIdx_branch;
  bool     t5_matched_simIdx_isLoaded;
  vector<int> *t5_moduleType_binary_;
  TBranch *t5_moduleType_binary_branch;
  bool     t5_moduleType_binary_isLoaded;
  vector<int> *t5_layer_binary_;
  TBranch *t5_layer_binary_branch;
  bool     t5_layer_binary_isLoaded;
  vector<float> *t5_matched_pt_;
  TBranch *t5_matched_pt_branch;
  bool     t5_matched_pt_isLoaded;
  vector<int> *t5_partOfTC_;
  TBranch *t5_partOfTC_branch;
  bool     t5_partOfTC_isLoaded;
  vector<int> *t5_tc_idx_;
  TBranch *t5_tc_idx_branch;
  bool     t5_tc_idx_isLoaded;
  vector<float> *t5_innerRadius_;
  TBranch *t5_innerRadius_branch;
  bool     t5_innerRadius_isLoaded;
  vector<float> *t5_outerRadius_;
  TBranch *t5_outerRadius_branch;
  bool     t5_outerRadius_isLoaded;
  vector<float> *t5_bridgeRadius_;
  TBranch *t5_bridgeRadius_branch;
  bool     t5_bridgeRadius_isLoaded;
  vector<float> *t5_chiSquared_;
  TBranch *t5_chiSquared_branch;
  bool     t5_chiSquared_isLoaded;
  vector<float> *t5_rzChiSquared_;
  TBranch *t5_rzChiSquared_branch;
  bool     t5_rzChiSquared_isLoaded;
  vector<float> *t5_nonAnchorChiSquared_;
  TBranch *t5_nonAnchorChiSquared_branch;
  bool     t5_nonAnchorChiSquared_isLoaded;
  vector<float> *MD_pt_;
  TBranch *MD_pt_branch;
  bool     MD_pt_isLoaded;
  vector<float> *MD_eta_;
  TBranch *MD_eta_branch;
  bool     MD_eta_isLoaded;
  vector<float> *MD_phi_;
  TBranch *MD_phi_branch;
  bool     MD_phi_isLoaded;
  vector<float> *MD_dphichange_;
  TBranch *MD_dphichange_branch;
  bool     MD_dphichange_isLoaded;
  vector<int> *MD_isFake_;
  TBranch *MD_isFake_branch;
  bool     MD_isFake_isLoaded;
  vector<int> *MD_tpType_;
  TBranch *MD_tpType_branch;
  bool     MD_tpType_isLoaded;
  vector<int> *MD_detId_;
  TBranch *MD_detId_branch;
  bool     MD_detId_isLoaded;
  vector<int> *MD_layer_;
  TBranch *MD_layer_branch;
  bool     MD_layer_isLoaded;
  vector<float> *MD_0_r_;
  TBranch *MD_0_r_branch;
  bool     MD_0_r_isLoaded;
  vector<float> *MD_0_x_;
  TBranch *MD_0_x_branch;
  bool     MD_0_x_isLoaded;
  vector<float> *MD_0_y_;
  TBranch *MD_0_y_branch;
  bool     MD_0_y_isLoaded;
  vector<float> *MD_0_z_;
  TBranch *MD_0_z_branch;
  bool     MD_0_z_isLoaded;
  vector<float> *MD_1_r_;
  TBranch *MD_1_r_branch;
  bool     MD_1_r_isLoaded;
  vector<float> *MD_1_x_;
  TBranch *MD_1_x_branch;
  bool     MD_1_x_isLoaded;
  vector<float> *MD_1_y_;
  TBranch *MD_1_y_branch;
  bool     MD_1_y_isLoaded;
  vector<float> *MD_1_z_;
  TBranch *MD_1_z_branch;
  bool     MD_1_z_isLoaded;
  vector<int> *MD_sim_idx_;
  TBranch *MD_sim_idx_branch;
  bool     MD_sim_idx_isLoaded;
  vector<float> *MD_sim_pt_;
  TBranch *MD_sim_pt_branch;
  bool     MD_sim_pt_isLoaded;
  vector<float> *MD_sim_eta_;
  TBranch *MD_sim_eta_branch;
  bool     MD_sim_eta_isLoaded;
  vector<int> *MD_n_sim_matches_;
  TBranch *MD_n_sim_matches_branch;
  bool     MD_n_sim_matches_isLoaded;
  vector<float> *LS_pt_;
  TBranch *LS_pt_branch;
  bool     LS_pt_isLoaded;
  vector<float> *LS_eta_;
  TBranch *LS_eta_branch;
  bool     LS_eta_isLoaded;
  vector<float> *LS_phi_;
  TBranch *LS_phi_branch;
  bool     LS_phi_isLoaded;
  vector<int> *LS_isFake_;
  TBranch *LS_isFake_branch;
  bool     LS_isFake_isLoaded;
  vector<int> *LS_MD_idx0_;
  TBranch *LS_MD_idx0_branch;
  bool     LS_MD_idx0_isLoaded;
  vector<int> *LS_MD_idx1_;
  TBranch *LS_MD_idx1_branch;
  bool     LS_MD_idx1_isLoaded;
  vector<int> *LS_0_idx_;
  TBranch *LS_0_idx_branch;
  bool     LS_0_idx_isLoaded;
  vector<float> *LS_0_r_;
  TBranch *LS_0_r_branch;
  bool     LS_0_r_isLoaded;
  vector<float> *LS_0_x_;
  TBranch *LS_0_x_branch;
  bool     LS_0_x_isLoaded;
  vector<float> *LS_0_y_;
  TBranch *LS_0_y_branch;
  bool     LS_0_y_isLoaded;
  vector<float> *LS_0_z_;
  TBranch *LS_0_z_branch;
  bool     LS_0_z_isLoaded;
  vector<int> *LS_0_detId_;
  TBranch *LS_0_detId_branch;
  bool     LS_0_detId_isLoaded;
  vector<int> *LS_0_layer_;
  TBranch *LS_0_layer_branch;
  bool     LS_0_layer_isLoaded;
  vector<int> *LS_0_moduleType_;
  TBranch *LS_0_moduleType_branch;
  bool     LS_0_moduleType_isLoaded;
  vector<int> *LS_2_idx_;
  TBranch *LS_2_idx_branch;
  bool     LS_2_idx_isLoaded;
  vector<float> *LS_2_r_;
  TBranch *LS_2_r_branch;
  bool     LS_2_r_isLoaded;
  vector<float> *LS_2_x_;
  TBranch *LS_2_x_branch;
  bool     LS_2_x_isLoaded;
  vector<float> *LS_2_y_;
  TBranch *LS_2_y_branch;
  bool     LS_2_y_isLoaded;
  vector<float> *LS_2_z_;
  TBranch *LS_2_z_branch;
  bool     LS_2_z_isLoaded;
  vector<int> *LS_2_detId_;
  TBranch *LS_2_detId_branch;
  bool     LS_2_detId_isLoaded;
  vector<int> *LS_2_layer_;
  TBranch *LS_2_layer_branch;
  bool     LS_2_layer_isLoaded;
  vector<int> *LS_2_moduleType_;
  TBranch *LS_2_moduleType_branch;
  bool     LS_2_moduleType_isLoaded;
  vector<int> *LS_1_idx_;
  TBranch *LS_1_idx_branch;
  bool     LS_1_idx_isLoaded;
  vector<int> *LS_3_idx_;
  TBranch *LS_3_idx_branch;
  bool     LS_3_idx_isLoaded;
  vector<vector<int> > *LS_all_sim_idx_;
  TBranch *LS_all_sim_idx_branch;
  bool     LS_all_sim_idx_isLoaded;
  vector<vector<int> > *LS_all_sim50_idx_;
  TBranch *LS_all_sim50_idx_branch;
  bool     LS_all_sim50_idx_isLoaded;
  vector<vector<int> > *LS_all_sim50_nhits_;
  TBranch *LS_all_sim50_nhits_branch;
  bool     LS_all_sim50_nhits_isLoaded;
  vector<vector<int> > *LS_trk_hitidxs_;
  TBranch *LS_trk_hitidxs_branch;
  bool     LS_trk_hitidxs_isLoaded;
  vector<vector<int> > *LS_trk_hittypes_;
  TBranch *LS_trk_hittypes_branch;
  bool     LS_trk_hittypes_isLoaded;
  vector<float> *LS_sim_pt_;
  TBranch *LS_sim_pt_branch;
  bool     LS_sim_pt_isLoaded;
  vector<float> *LS_sim_eta_;
  TBranch *LS_sim_eta_branch;
  bool     LS_sim_eta_isLoaded;
  vector<float> *LS_sim_phi_;
  TBranch *LS_sim_phi_branch;
  bool     LS_sim_phi_isLoaded;
  vector<float> *LS_sim_pca_dxy_;
  TBranch *LS_sim_pca_dxy_branch;
  bool     LS_sim_pca_dxy_isLoaded;
  vector<float> *LS_sim_pca_dz_;
  TBranch *LS_sim_pca_dz_branch;
  bool     LS_sim_pca_dz_isLoaded;
  vector<int> *LS_sim_q_;
  TBranch *LS_sim_q_branch;
  bool     LS_sim_q_isLoaded;
  vector<int> *LS_sim_pdgId_;
  TBranch *LS_sim_pdgId_branch;
  bool     LS_sim_pdgId_isLoaded;
  vector<int> *LS_sim_event_;
  TBranch *LS_sim_event_branch;
  bool     LS_sim_event_isLoaded;
  vector<int> *LS_sim_bx_;
  TBranch *LS_sim_bx_branch;
  bool     LS_sim_bx_isLoaded;
  vector<float> *LS_sim_vx_;
  TBranch *LS_sim_vx_branch;
  bool     LS_sim_vx_isLoaded;
  vector<float> *LS_sim_vy_;
  TBranch *LS_sim_vy_branch;
  bool     LS_sim_vy_isLoaded;
  vector<float> *LS_sim_vz_;
  TBranch *LS_sim_vz_branch;
  bool     LS_sim_vz_isLoaded;
  vector<int> *LS_isInTrueTC_;
  TBranch *LS_isInTrueTC_branch;
  bool     LS_isInTrueTC_isLoaded;
  vector<int> *t3_LS_idx0_;
  TBranch *t3_LS_idx0_branch;
  bool     t3_LS_idx0_isLoaded;
  vector<int> *t3_LS_idx1_;
  TBranch *t3_LS_idx1_branch;
  bool     t3_LS_idx1_isLoaded;
  vector<int> *pLS_isFake_;
  TBranch *pLS_isFake_branch;
  bool     pLS_isFake_isLoaded;
  vector<int> *pLS_sim_idx_;
  TBranch *pLS_sim_idx_branch;
  bool     pLS_sim_idx_isLoaded;
  vector<vector<int> > *pLS_all_sim25_idx_;
  TBranch *pLS_all_sim25_idx_branch;
  bool     pLS_all_sim25_idx_isLoaded;
  vector<vector<int> > *pLS_all_sim25_nhits_;
  TBranch *pLS_all_sim25_nhits_branch;
  bool     pLS_all_sim25_nhits_isLoaded;
  vector<vector<int> > *pLS_trk_hitidxs_;
  TBranch *pLS_trk_hitidxs_branch;
  bool     pLS_trk_hitidxs_isLoaded;
  vector<vector<int> > *pLS_trk_hittypes_;
  TBranch *pLS_trk_hittypes_branch;
  bool     pLS_trk_hittypes_isLoaded;
  vector<float> *pLS_sim_pt_;
  TBranch *pLS_sim_pt_branch;
  bool     pLS_sim_pt_isLoaded;
  vector<float> *pLS_sim_eta_;
  TBranch *pLS_sim_eta_branch;
  bool     pLS_sim_eta_isLoaded;
  vector<int> *pLS_n_sim_matches_;
  TBranch *pLS_n_sim_matches_branch;
  bool     pLS_n_sim_matches_isLoaded;
  vector<float> *pLS_pt_;
  TBranch *pLS_pt_branch;
  bool     pLS_pt_isLoaded;
  vector<float> *pLS_eta_;
  TBranch *pLS_eta_branch;
  bool     pLS_eta_isLoaded;
  vector<float> *pLS_phi_;
  TBranch *pLS_phi_branch;
  bool     pLS_phi_isLoaded;
  vector<float> *pLS_radius_;
  TBranch *pLS_radius_branch;
  bool     pLS_radius_isLoaded;
  vector<float> *pLS_dz_;
  TBranch *pLS_dz_branch;
  bool     pLS_dz_isLoaded;
  vector<float> *pLS_global_Px_;
  TBranch *pLS_global_Px_branch;
  bool     pLS_global_Px_isLoaded;
  vector<float> *pLS_global_Py_;
  TBranch *pLS_global_Py_branch;
  bool     pLS_global_Py_isLoaded;
  vector<float> *pLS_global_Pz_;
  TBranch *pLS_global_Pz_branch;
  bool     pLS_global_Pz_isLoaded;
  vector<float> *pLS_global_x_;
  TBranch *pLS_global_x_branch;
  bool     pLS_global_x_isLoaded;
  vector<float> *pLS_global_y_;
  TBranch *pLS_global_y_branch;
  bool     pLS_global_y_isLoaded;
  vector<float> *pLS_global_z_;
  TBranch *pLS_global_z_branch;
  bool     pLS_global_z_isLoaded;
  vector<int> *pLS_charge_;
  TBranch *pLS_charge_branch;
  bool     pLS_charge_isLoaded;
  vector<int> *pLS_0_idx_;
  TBranch *pLS_0_idx_branch;
  bool     pLS_0_idx_isLoaded;
  vector<float> *pLS_0_x_;
  TBranch *pLS_0_x_branch;
  bool     pLS_0_x_isLoaded;
  vector<float> *pLS_0_y_;
  TBranch *pLS_0_y_branch;
  bool     pLS_0_y_isLoaded;
  vector<float> *pLS_0_z_;
  TBranch *pLS_0_z_branch;
  bool     pLS_0_z_isLoaded;
  vector<float> *pLS_0_r_;
  TBranch *pLS_0_r_branch;
  bool     pLS_0_r_isLoaded;
  vector<int> *pLS_1_idx_;
  TBranch *pLS_1_idx_branch;
  bool     pLS_1_idx_isLoaded;
  vector<float> *pLS_1_x_;
  TBranch *pLS_1_x_branch;
  bool     pLS_1_x_isLoaded;
  vector<float> *pLS_1_y_;
  TBranch *pLS_1_y_branch;
  bool     pLS_1_y_isLoaded;
  vector<float> *pLS_1_z_;
  TBranch *pLS_1_z_branch;
  bool     pLS_1_z_isLoaded;
  vector<float> *pLS_1_r_;
  TBranch *pLS_1_r_branch;
  bool     pLS_1_r_isLoaded;
  vector<int> *pLS_2_idx_;
  TBranch *pLS_2_idx_branch;
  bool     pLS_2_idx_isLoaded;
  vector<float> *pLS_2_x_;
  TBranch *pLS_2_x_branch;
  bool     pLS_2_x_isLoaded;
  vector<float> *pLS_2_y_;
  TBranch *pLS_2_y_branch;
  bool     pLS_2_y_isLoaded;
  vector<float> *pLS_2_z_;
  TBranch *pLS_2_z_branch;
  bool     pLS_2_z_isLoaded;
  vector<float> *pLS_2_r_;
  TBranch *pLS_2_r_branch;
  bool     pLS_2_r_isLoaded;
  vector<int> *pLS_3_idx_;
  TBranch *pLS_3_idx_branch;
  bool     pLS_3_idx_isLoaded;
  vector<float> *pLS_3_x_;
  TBranch *pLS_3_x_branch;
  bool     pLS_3_x_isLoaded;
  vector<float> *pLS_3_y_;
  TBranch *pLS_3_y_branch;
  bool     pLS_3_y_isLoaded;
  vector<float> *pLS_3_z_;
  TBranch *pLS_3_z_branch;
  bool     pLS_3_z_isLoaded;
  vector<float> *pLS_3_r_;
  TBranch *pLS_3_r_branch;
  bool     pLS_3_r_isLoaded;
  vector<int> *pLS_n_hits_;
  TBranch *pLS_n_hits_branch;
  bool     pLS_n_hits_isLoaded;
  vector<vector<int> > *tc_lsIdx_;
  TBranch *tc_lsIdx_branch;
  bool     tc_lsIdx_isLoaded;
  vector<int> *t5_t3_idx0_;
  TBranch *t5_t3_idx0_branch;
  bool     t5_t3_idx0_isLoaded;
  vector<int> *t5_t3_idx1_;
  TBranch *t5_t3_idx1_branch;
  bool     t5_t3_idx1_isLoaded;
  vector<int> *t3_isFake_;
  TBranch *t3_isFake_branch;
  bool     t3_isFake_isLoaded;
  vector<float> *t3_ptLegacy_;
  TBranch *t3_ptLegacy_branch;
  bool     t3_ptLegacy_isLoaded;
  vector<float> *t3_pt_;
  TBranch *t3_pt_branch;
  bool     t3_pt_isLoaded;
  vector<float> *t3_eta_;
  TBranch *t3_eta_branch;
  bool     t3_eta_isLoaded;
  vector<float> *t3_phi_;
  TBranch *t3_phi_branch;
  bool     t3_phi_isLoaded;
  vector<float> *t3_0_r_;
  TBranch *t3_0_r_branch;
  bool     t3_0_r_isLoaded;
  vector<float> *t3_0_dr_;
  TBranch *t3_0_dr_branch;
  bool     t3_0_dr_isLoaded;
  vector<float> *t3_0_x_;
  TBranch *t3_0_x_branch;
  bool     t3_0_x_isLoaded;
  vector<float> *t3_0_y_;
  TBranch *t3_0_y_branch;
  bool     t3_0_y_isLoaded;
  vector<float> *t3_0_z_;
  TBranch *t3_0_z_branch;
  bool     t3_0_z_isLoaded;
  vector<float> *t3_0_eta_;
  TBranch *t3_0_eta_branch;
  bool     t3_0_eta_isLoaded;
  vector<float> *t3_0_phi_;
  TBranch *t3_0_phi_branch;
  bool     t3_0_phi_isLoaded;
  vector<int> *t3_0_detId_;
  TBranch *t3_0_detId_branch;
  bool     t3_0_detId_isLoaded;
  vector<int> *t3_0_layer_;
  TBranch *t3_0_layer_branch;
  bool     t3_0_layer_isLoaded;
  vector<int> *t3_0_moduleType_;
  TBranch *t3_0_moduleType_branch;
  bool     t3_0_moduleType_isLoaded;
  vector<float> *t3_2_r_;
  TBranch *t3_2_r_branch;
  bool     t3_2_r_isLoaded;
  vector<float> *t3_2_dr_;
  TBranch *t3_2_dr_branch;
  bool     t3_2_dr_isLoaded;
  vector<float> *t3_2_x_;
  TBranch *t3_2_x_branch;
  bool     t3_2_x_isLoaded;
  vector<float> *t3_2_y_;
  TBranch *t3_2_y_branch;
  bool     t3_2_y_isLoaded;
  vector<float> *t3_2_z_;
  TBranch *t3_2_z_branch;
  bool     t3_2_z_isLoaded;
  vector<float> *t3_2_eta_;
  TBranch *t3_2_eta_branch;
  bool     t3_2_eta_isLoaded;
  vector<float> *t3_2_phi_;
  TBranch *t3_2_phi_branch;
  bool     t3_2_phi_isLoaded;
  vector<int> *t3_2_detId_;
  TBranch *t3_2_detId_branch;
  bool     t3_2_detId_isLoaded;
  vector<int> *t3_2_layer_;
  TBranch *t3_2_layer_branch;
  bool     t3_2_layer_isLoaded;
  vector<int> *t3_2_moduleType_;
  TBranch *t3_2_moduleType_branch;
  bool     t3_2_moduleType_isLoaded;
  vector<float> *t3_4_r_;
  TBranch *t3_4_r_branch;
  bool     t3_4_r_isLoaded;
  vector<float> *t3_4_dr_;
  TBranch *t3_4_dr_branch;
  bool     t3_4_dr_isLoaded;
  vector<float> *t3_4_x_;
  TBranch *t3_4_x_branch;
  bool     t3_4_x_isLoaded;
  vector<float> *t3_4_y_;
  TBranch *t3_4_y_branch;
  bool     t3_4_y_isLoaded;
  vector<float> *t3_4_z_;
  TBranch *t3_4_z_branch;
  bool     t3_4_z_isLoaded;
  vector<float> *t3_4_eta_;
  TBranch *t3_4_eta_branch;
  bool     t3_4_eta_isLoaded;
  vector<float> *t3_4_phi_;
  TBranch *t3_4_phi_branch;
  bool     t3_4_phi_isLoaded;
  vector<int> *t3_4_detId_;
  TBranch *t3_4_detId_branch;
  bool     t3_4_detId_isLoaded;
  vector<int> *t3_4_layer_;
  TBranch *t3_4_layer_branch;
  bool     t3_4_layer_isLoaded;
  vector<int> *t3_4_moduleType_;
  TBranch *t3_4_moduleType_branch;
  bool     t3_4_moduleType_isLoaded;
public: 
void Init(TTree *tree);
void GetEntry(unsigned int idx); 
void LoadAllBranches(); 
  const vector<float> &sim_pt();
  const vector<float> &sim_eta();
  const vector<float> &sim_phi();
  const vector<float> &sim_pca_dxy();
  const vector<float> &sim_pca_dz();
  const vector<int> &sim_q();
  const vector<int> &sim_event();
  const vector<int> &sim_pdgId();
  const vector<float> &sim_vx();
  const vector<float> &sim_vy();
  const vector<float> &sim_vz();
  const vector<float> &sim_trkNtupIdx();
  const vector<int> &sim_TC_matched();
  const vector<vector<int> > &sim_TC_matched_idx();
  const vector<int> &sim_TC_matched_mask();
  const vector<float> &tc_pt();
  const vector<float> &tc_eta();
  const vector<float> &tc_phi();
  const vector<int> &tc_type();
  const vector<int> &tc_isFake();
  const vector<int> &tc_isDuplicate();
  const vector<vector<int> > &tc_matched_simIdx();
  const vector<float> &sim_dummy();
  const vector<float> &tc_dummy();
  const vector<vector<int> > &pT5_matched_simIdx();
  const vector<vector<int> > &pT5_hitIdxs();
  const vector<int> &sim_pT5_matched();
  const vector<float> &pT5_pt();
  const vector<float> &pT5_eta();
  const vector<float> &pT5_phi();
  const vector<int> &pT5_isFake();
  const vector<int> &pT5_isDuplicate();
  const vector<int> &pT5_score();
  const vector<int> &pT5_layer_binary();
  const vector<int> &pT5_moduleType_binary();
  const vector<float> &pT5_matched_pt();
  const vector<float> &pT5_rzChiSquared();
  const vector<float> &pT5_rPhiChiSquared();
  const vector<float> &pT5_rPhiChiSquaredInwards();
  const vector<int> &sim_pT3_matched();
  const vector<float> &pT3_pt();
  const vector<int> &pT3_isFake();
  const vector<int> &pT3_isDuplicate();
  const vector<float> &pT3_eta();
  const vector<float> &pT3_phi();
  const vector<float> &pT3_score();
  const vector<int> &pT3_foundDuplicate();
  const vector<vector<int> > &pT3_matched_simIdx();
  const vector<vector<int> > &pT3_hitIdxs();
  const vector<float> &pT3_pixelRadius();
  const vector<float> &pT3_pixelRadiusError();
  const vector<vector<float> > &pT3_matched_pt();
  const vector<float> &pT3_tripletRadius();
  const vector<float> &pT3_rPhiChiSquared();
  const vector<float> &pT3_rPhiChiSquaredInwards();
  const vector<float> &pT3_rzChiSquared();
  const vector<int> &pT3_layer_binary();
  const vector<int> &pT3_moduleType_binary();
  const vector<int> &sim_T5_matched();
  const vector<int> &t5_isFake();
  const vector<int> &t5_isDuplicate();
  const vector<int> &t5_foundDuplicate();
  const vector<float> &t5_pt();
  const vector<float> &t5_eta();
  const vector<float> &t5_phi();
  const vector<float> &t5_score_rphisum();
  const vector<vector<int> > &t5_hitIdxs();
  const vector<vector<int> > &t5_matched_simIdx();
  const vector<int> &t5_moduleType_binary();
  const vector<int> &t5_layer_binary();
  const vector<float> &t5_matched_pt();
  const vector<int> &t5_partOfTC();
  const vector<int> &t5_tc_idx();
  const vector<float> &t5_innerRadius();
  const vector<float> &t5_outerRadius();
  const vector<float> &t5_bridgeRadius();
  const vector<float> &t5_chiSquared();
  const vector<float> &t5_rzChiSquared();
  const vector<float> &t5_nonAnchorChiSquared();
  const vector<float> &MD_pt();
  const vector<float> &MD_eta();
  const vector<float> &MD_phi();
  const vector<float> &MD_dphichange();
  const vector<int> &MD_isFake();
  const vector<int> &MD_tpType();
  const vector<int> &MD_detId();
  const vector<int> &MD_layer();
  const vector<float> &MD_0_r();
  const vector<float> &MD_0_x();
  const vector<float> &MD_0_y();
  const vector<float> &MD_0_z();
  const vector<float> &MD_1_r();
  const vector<float> &MD_1_x();
  const vector<float> &MD_1_y();
  const vector<float> &MD_1_z();
  const vector<int> &MD_sim_idx();
  const vector<float> &MD_sim_pt();
  const vector<float> &MD_sim_eta();
  const vector<int> &MD_n_sim_matches();
  const vector<float> &LS_pt();
  const vector<float> &LS_eta();
  const vector<float> &LS_phi();
  const vector<int> &LS_isFake();
  const vector<int> &LS_MD_idx0();
  const vector<int> &LS_MD_idx1();
  const vector<int> &LS_0_idx();
  const vector<float> &LS_0_r();
  const vector<float> &LS_0_x();
  const vector<float> &LS_0_y();
  const vector<float> &LS_0_z();
  const vector<int> &LS_0_detId();
  const vector<int> &LS_0_layer();
  const vector<int> &LS_0_moduleType();
  const vector<int> &LS_2_idx();
  const vector<float> &LS_2_r();
  const vector<float> &LS_2_x();
  const vector<float> &LS_2_y();
  const vector<float> &LS_2_z();
  const vector<int> &LS_2_detId();
  const vector<int> &LS_2_layer();
  const vector<int> &LS_2_moduleType();
  const vector<int> &LS_1_idx();
  const vector<int> &LS_3_idx();
  const vector<vector<int> > &LS_all_sim_idx();
  const vector<vector<int> > &LS_all_sim50_idx();
  const vector<vector<int> > &LS_all_sim50_nhits();
  const vector<vector<int> > &LS_trk_hitidxs();
  const vector<vector<int> > &LS_trk_hittypes();
  const vector<float> &LS_sim_pt();
  const vector<float> &LS_sim_eta();
  const vector<float> &LS_sim_phi();
  const vector<float> &LS_sim_pca_dxy();
  const vector<float> &LS_sim_pca_dz();
  const vector<int> &LS_sim_q();
  const vector<int> &LS_sim_pdgId();
  const vector<int> &LS_sim_event();
  const vector<int> &LS_sim_bx();
  const vector<float> &LS_sim_vx();
  const vector<float> &LS_sim_vy();
  const vector<float> &LS_sim_vz();
  const vector<int> &LS_isInTrueTC();
  const vector<int> &t3_LS_idx0();
  const vector<int> &t3_LS_idx1();
  const vector<int> &pLS_isFake();
  const vector<int> &pLS_sim_idx();
  const vector<vector<int> > &pLS_all_sim25_idx();
  const vector<vector<int> > &pLS_all_sim25_nhits();
  const vector<vector<int> > &pLS_trk_hitidxs();
  const vector<vector<int> > &pLS_trk_hittypes();
  const vector<float> &pLS_sim_pt();
  const vector<float> &pLS_sim_eta();
  const vector<int> &pLS_n_sim_matches();
  const vector<float> &pLS_pt();
  const vector<float> &pLS_eta();
  const vector<float> &pLS_phi();
  const vector<float> &pLS_radius();
  const vector<float> &pLS_dz();
  const vector<float> &pLS_global_Px();
  const vector<float> &pLS_global_Py();
  const vector<float> &pLS_global_Pz();
  const vector<float> &pLS_global_x();
  const vector<float> &pLS_global_y();
  const vector<float> &pLS_global_z();
  const vector<int> &pLS_charge();
  const vector<int> &pLS_0_idx();
  const vector<float> &pLS_0_x();
  const vector<float> &pLS_0_y();
  const vector<float> &pLS_0_z();
  const vector<float> &pLS_0_r();
  const vector<int> &pLS_1_idx();
  const vector<float> &pLS_1_x();
  const vector<float> &pLS_1_y();
  const vector<float> &pLS_1_z();
  const vector<float> &pLS_1_r();
  const vector<int> &pLS_2_idx();
  const vector<float> &pLS_2_x();
  const vector<float> &pLS_2_y();
  const vector<float> &pLS_2_z();
  const vector<float> &pLS_2_r();
  const vector<int> &pLS_3_idx();
  const vector<float> &pLS_3_x();
  const vector<float> &pLS_3_y();
  const vector<float> &pLS_3_z();
  const vector<float> &pLS_3_r();
  const vector<int> &pLS_n_hits();
  const vector<vector<int> > &tc_lsIdx();
  const vector<int> &t5_t3_idx0();
  const vector<int> &t5_t3_idx1();
  const vector<int> &t3_isFake();
  const vector<float> &t3_ptLegacy();
  const vector<float> &t3_pt();
  const vector<float> &t3_eta();
  const vector<float> &t3_phi();
  const vector<float> &t3_0_r();
  const vector<float> &t3_0_dr();
  const vector<float> &t3_0_x();
  const vector<float> &t3_0_y();
  const vector<float> &t3_0_z();
  const vector<float> &t3_0_eta();
  const vector<float> &t3_0_phi();
  const vector<int> &t3_0_detId();
  const vector<int> &t3_0_layer();
  const vector<int> &t3_0_moduleType();
  const vector<float> &t3_2_r();
  const vector<float> &t3_2_dr();
  const vector<float> &t3_2_x();
  const vector<float> &t3_2_y();
  const vector<float> &t3_2_z();
  const vector<float> &t3_2_eta();
  const vector<float> &t3_2_phi();
  const vector<int> &t3_2_detId();
  const vector<int> &t3_2_layer();
  const vector<int> &t3_2_moduleType();
  const vector<float> &t3_4_r();
  const vector<float> &t3_4_dr();
  const vector<float> &t3_4_x();
  const vector<float> &t3_4_y();
  const vector<float> &t3_4_z();
  const vector<float> &t3_4_eta();
  const vector<float> &t3_4_phi();
  const vector<int> &t3_4_detId();
  const vector<int> &t3_4_layer();
  const vector<int> &t3_4_moduleType();

  static void progress(int nEventsTotal, int nEventsChain);
};

#ifndef __CINT__
extern LSTTree lst;
#endif

namespace GNN {
  const vector<float> &sim_pt();
  const vector<float> &sim_eta();
  const vector<float> &sim_phi();
  const vector<float> &sim_pca_dxy();
  const vector<float> &sim_pca_dz();
  const vector<int> &sim_q();
  const vector<int> &sim_event();
  const vector<int> &sim_pdgId();
  const vector<float> &sim_vx();
  const vector<float> &sim_vy();
  const vector<float> &sim_vz();
  const vector<float> &sim_trkNtupIdx();
  const vector<int> &sim_TC_matched();
  const vector<vector<int> > &sim_TC_matched_idx();
  const vector<int> &sim_TC_matched_mask();
  const vector<float> &tc_pt();
  const vector<float> &tc_eta();
  const vector<float> &tc_phi();
  const vector<int> &tc_type();
  const vector<int> &tc_isFake();
  const vector<int> &tc_isDuplicate();
  const vector<vector<int> > &tc_matched_simIdx();
  const vector<float> &sim_dummy();
  const vector<float> &tc_dummy();
  const vector<vector<int> > &pT5_matched_simIdx();
  const vector<vector<int> > &pT5_hitIdxs();
  const vector<int> &sim_pT5_matched();
  const vector<float> &pT5_pt();
  const vector<float> &pT5_eta();
  const vector<float> &pT5_phi();
  const vector<int> &pT5_isFake();
  const vector<int> &pT5_isDuplicate();
  const vector<int> &pT5_score();
  const vector<int> &pT5_layer_binary();
  const vector<int> &pT5_moduleType_binary();
  const vector<float> &pT5_matched_pt();
  const vector<float> &pT5_rzChiSquared();
  const vector<float> &pT5_rPhiChiSquared();
  const vector<float> &pT5_rPhiChiSquaredInwards();
  const vector<int> &sim_pT3_matched();
  const vector<float> &pT3_pt();
  const vector<int> &pT3_isFake();
  const vector<int> &pT3_isDuplicate();
  const vector<float> &pT3_eta();
  const vector<float> &pT3_phi();
  const vector<float> &pT3_score();
  const vector<int> &pT3_foundDuplicate();
  const vector<vector<int> > &pT3_matched_simIdx();
  const vector<vector<int> > &pT3_hitIdxs();
  const vector<float> &pT3_pixelRadius();
  const vector<float> &pT3_pixelRadiusError();
  const vector<vector<float> > &pT3_matched_pt();
  const vector<float> &pT3_tripletRadius();
  const vector<float> &pT3_rPhiChiSquared();
  const vector<float> &pT3_rPhiChiSquaredInwards();
  const vector<float> &pT3_rzChiSquared();
  const vector<int> &pT3_layer_binary();
  const vector<int> &pT3_moduleType_binary();
  const vector<int> &sim_T5_matched();
  const vector<int> &t5_isFake();
  const vector<int> &t5_isDuplicate();
  const vector<int> &t5_foundDuplicate();
  const vector<float> &t5_pt();
  const vector<float> &t5_eta();
  const vector<float> &t5_phi();
  const vector<float> &t5_score_rphisum();
  const vector<vector<int> > &t5_hitIdxs();
  const vector<vector<int> > &t5_matched_simIdx();
  const vector<int> &t5_moduleType_binary();
  const vector<int> &t5_layer_binary();
  const vector<float> &t5_matched_pt();
  const vector<int> &t5_partOfTC();
  const vector<int> &t5_tc_idx();
  const vector<float> &t5_innerRadius();
  const vector<float> &t5_outerRadius();
  const vector<float> &t5_bridgeRadius();
  const vector<float> &t5_chiSquared();
  const vector<float> &t5_rzChiSquared();
  const vector<float> &t5_nonAnchorChiSquared();
  const vector<float> &MD_pt();
  const vector<float> &MD_eta();
  const vector<float> &MD_phi();
  const vector<float> &MD_dphichange();
  const vector<int> &MD_isFake();
  const vector<int> &MD_tpType();
  const vector<int> &MD_detId();
  const vector<int> &MD_layer();
  const vector<float> &MD_0_r();
  const vector<float> &MD_0_x();
  const vector<float> &MD_0_y();
  const vector<float> &MD_0_z();
  const vector<float> &MD_1_r();
  const vector<float> &MD_1_x();
  const vector<float> &MD_1_y();
  const vector<float> &MD_1_z();
  const vector<int> &MD_sim_idx();
  const vector<float> &MD_sim_pt();
  const vector<float> &MD_sim_eta();
  const vector<int> &MD_n_sim_matches();
  const vector<float> &LS_pt();
  const vector<float> &LS_eta();
  const vector<float> &LS_phi();
  const vector<int> &LS_isFake();
  const vector<int> &LS_MD_idx0();
  const vector<int> &LS_MD_idx1();
  const vector<int> &LS_0_idx();
  const vector<float> &LS_0_r();
  const vector<float> &LS_0_x();
  const vector<float> &LS_0_y();
  const vector<float> &LS_0_z();
  const vector<int> &LS_0_detId();
  const vector<int> &LS_0_layer();
  const vector<int> &LS_0_moduleType();
  const vector<int> &LS_2_idx();
  const vector<float> &LS_2_r();
  const vector<float> &LS_2_x();
  const vector<float> &LS_2_y();
  const vector<float> &LS_2_z();
  const vector<int> &LS_2_detId();
  const vector<int> &LS_2_layer();
  const vector<int> &LS_2_moduleType();
  const vector<int> &LS_1_idx();
  const vector<int> &LS_3_idx();
  const vector<vector<int> > &LS_all_sim_idx();
  const vector<vector<int> > &LS_all_sim50_idx();
  const vector<vector<int> > &LS_all_sim50_nhits();
  const vector<vector<int> > &LS_trk_hitidxs();
  const vector<vector<int> > &LS_trk_hittypes();
  const vector<float> &LS_sim_pt();
  const vector<float> &LS_sim_eta();
  const vector<float> &LS_sim_phi();
  const vector<float> &LS_sim_pca_dxy();
  const vector<float> &LS_sim_pca_dz();
  const vector<int> &LS_sim_q();
  const vector<int> &LS_sim_pdgId();
  const vector<int> &LS_sim_event();
  const vector<int> &LS_sim_bx();
  const vector<float> &LS_sim_vx();
  const vector<float> &LS_sim_vy();
  const vector<float> &LS_sim_vz();
  const vector<int> &LS_isInTrueTC();
  const vector<int> &t3_LS_idx0();
  const vector<int> &t3_LS_idx1();
  const vector<int> &pLS_isFake();
  const vector<int> &pLS_sim_idx();
  const vector<vector<int> > &pLS_all_sim25_idx();
  const vector<vector<int> > &pLS_all_sim25_nhits();
  const vector<vector<int> > &pLS_trk_hitidxs();
  const vector<vector<int> > &pLS_trk_hittypes();
  const vector<float> &pLS_sim_pt();
  const vector<float> &pLS_sim_eta();
  const vector<int> &pLS_n_sim_matches();
  const vector<float> &pLS_pt();
  const vector<float> &pLS_eta();
  const vector<float> &pLS_phi();
  const vector<float> &pLS_radius();
  const vector<float> &pLS_dz();
  const vector<float> &pLS_global_Px();
  const vector<float> &pLS_global_Py();
  const vector<float> &pLS_global_Pz();
  const vector<float> &pLS_global_x();
  const vector<float> &pLS_global_y();
  const vector<float> &pLS_global_z();
  const vector<int> &pLS_charge();
  const vector<int> &pLS_0_idx();
  const vector<float> &pLS_0_x();
  const vector<float> &pLS_0_y();
  const vector<float> &pLS_0_z();
  const vector<float> &pLS_0_r();
  const vector<int> &pLS_1_idx();
  const vector<float> &pLS_1_x();
  const vector<float> &pLS_1_y();
  const vector<float> &pLS_1_z();
  const vector<float> &pLS_1_r();
  const vector<int> &pLS_2_idx();
  const vector<float> &pLS_2_x();
  const vector<float> &pLS_2_y();
  const vector<float> &pLS_2_z();
  const vector<float> &pLS_2_r();
  const vector<int> &pLS_3_idx();
  const vector<float> &pLS_3_x();
  const vector<float> &pLS_3_y();
  const vector<float> &pLS_3_z();
  const vector<float> &pLS_3_r();
  const vector<int> &pLS_n_hits();
  const vector<vector<int> > &tc_lsIdx();
  const vector<int> &t5_t3_idx0();
  const vector<int> &t5_t3_idx1();
  const vector<int> &t3_isFake();
  const vector<float> &t3_ptLegacy();
  const vector<float> &t3_pt();
  const vector<float> &t3_eta();
  const vector<float> &t3_phi();
  const vector<float> &t3_0_r();
  const vector<float> &t3_0_dr();
  const vector<float> &t3_0_x();
  const vector<float> &t3_0_y();
  const vector<float> &t3_0_z();
  const vector<float> &t3_0_eta();
  const vector<float> &t3_0_phi();
  const vector<int> &t3_0_detId();
  const vector<int> &t3_0_layer();
  const vector<int> &t3_0_moduleType();
  const vector<float> &t3_2_r();
  const vector<float> &t3_2_dr();
  const vector<float> &t3_2_x();
  const vector<float> &t3_2_y();
  const vector<float> &t3_2_z();
  const vector<float> &t3_2_eta();
  const vector<float> &t3_2_phi();
  const vector<int> &t3_2_detId();
  const vector<int> &t3_2_layer();
  const vector<int> &t3_2_moduleType();
  const vector<float> &t3_4_r();
  const vector<float> &t3_4_dr();
  const vector<float> &t3_4_x();
  const vector<float> &t3_4_y();
  const vector<float> &t3_4_z();
  const vector<float> &t3_4_eta();
  const vector<float> &t3_4_phi();
  const vector<int> &t3_4_detId();
  const vector<int> &t3_4_layer();
  const vector<int> &t3_4_moduleType();
}
#endif
